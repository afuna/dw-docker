# Setup
## Set up a persistent data container `mysql-data`
    docker build -t dreamwidth/mysql-data mysql-data
    docker run -d --name mysql-data dreamwidth/mysql-data

## Set up mysql container
    docker build -t dreamwidth/mysql mysql
    docker run --entrypoint "/bin/bash" -t -i --volumes-from mysql-data dreamwidth/mysql -i
    # and then run /opt/init-db.sh if we haven't run the mysql container yet

## Start mysql (need to do this before setting up Dreamwidth container)
    docker run -d --name mysql-db --volumes-from mysql-data dreamwidth/mysql

## Set up persistent logs container `web-logs`
    docker build -t dreamwidth/web-logs dreamwidth-logs
    docker run -d --name web-logs dreamwidth/web-logs

## Set up Dreamwidth container
    docker build -t dreamwidth/web dreamwidth
    docker run --entrypoint "/bin/bash" -t -i --link mysql-db:db dreamwidth/web -i
    # and then run /opt/init-db.sh if we haven't run any dw containers yet

## Start Dreamwidth web server
    docker run  -d --name web -t -i --link mysql-db:db --volumes-from web-logs -p 80  dreamwidth/web

# Testing
## Connect to mysql from a test container
    docker run  --entrypoint "/bin/bash" -t -i --link mysql-db:db dreamwidth/mysql
    mysql -uroot -h $DB_PORT_3306_TCP_ADDR -P $DB_PORT_3306_TCP_PORT

## Poke around the container's filesystem
    docker run -i -t --entrypoint "/bin/bash" --volumes-from mysql-data dreamwidth/mysql

## Look at the webserver logs
    docker run -i -t --entrypoint "tail" --volumes-from web-logs busybox /var/log/apache2/error.log
